{
    "digital_input": 
    {
        "prefix": "digital_input",
        "body": "digital_input ${0:Name};"
    },
    "digital_output": 
    {
        "prefix": "digital_output",
        "body": "digital_output ${0:Name};"
    },
    "analog_input": 
    {
        "prefix": "analog_input",
        "body": "analog_input ${0:Name};"
    },
    "analog_output": 
    {
        "prefix": "analog_output",
        "body": "analog_output ${0:Name};"
    },
    "string_input": 
    {
        "prefix": "string_input",
        "body": "string_input ${1:Name}[${2:stringSize}];"
    },
    "string_output": 
    {
        "prefix": "string_output",
        "body": "string_output ${0:Name};"
    },
    "push": 
    {
        "prefix": "push",
        "body":
        [   
            "push ${1:DigitalInput}",
            "{",
                "\t${0://code here}",
            "}"
        ]
    },
    "release": 
    {
        "prefix": "release",
        "body":
        [ 
            "release ${1:DigitalInput}",
            "{",
                "\t${0://code here}",
            "}"
        ]
    },
    "change": 
    {
        "prefix": "change",
        "body":
        [ 
            "change ${1:StringOrAnalogInput}",
            "{",
                "\t${0://code here}",
            "}"
        ]
    },
    "integer_parameter": 
    {
        "prefix": "integer_parameter",
        "body": "integer_parameter ${0:Name};"
    },
    "string_parameter": 
    {
        "prefix": "string_parameter",
        "body": "string_parameter ${0:Name};"
    },
    "trace": 
    {
        "prefix": "trace",
        "body": "trace(\"${1:string}\",${2:args});\r\n$0"
    },
    "makestring":
    {
        "prefix": "makestring",
        "body": "makestring(${1:destinationVariable},\"${2:string}\",${3:args});\r\n$0"
    },
    "find":
    {
        "prefix": "find",
        "body": "find(\"${1:match_string}\",${2:source_string})"
    },
    "mid":
    {
        "prefix": "mid",
        "body": "mid(${1:source},${2:start},${3:number})"
    },
    "delay": 
    {
        "prefix": "delay",
        "body": "delay(${1:hundredthsOfaSecond});"
    },
    "lower": 
    {
        "prefix": "lower",
        "body": "lower(${1:stringVariable})"
    },
    "upper": 
    {
        "prefix": "upper",
        "body": "upper(${1:stringVariable})"
    },
    "itoa": 
    {
        "prefix": "itoa",
        "body": "itoa(${1:integerVariable})"
    },
    "atoi": 
    {
        "prefix": "atoi",
        "body": "atoi(${1:stringVariable})"
    },
    "chr": 
    {
        "prefix": "chr",
        "body": "chr(${1:integerCode})",
        "description": "Takes the integer value specified and returns the corresponding ASCII character as a one-byte string."
    },
    "pulse": 
    {
        "prefix": "pulse",
        "body": "pulse(${1:hundredthsOfaSecond}, ${2:digitalOutput});\r\n$0"
    },
    "for":
    {
        "prefix": "for",
        "body": 
        [
            "for(${1:variableName} = ${2:value} to ${3:limit})",
            "{",
            "\t${0://code here}",
            "}"
        ]
    },
    "switch":
    {
        "prefix": "switch",
        "body": 
        [
            "switch(${1:expression})",
            "{",
            "\tcase (${2:value}):",
            "\t{",
            "\t\t${0://code here}",
            "\t}",
            "\tdefault:",
            "\t{",
            "\t\t",
            "\t}",
            "}"
        ]
    },
    "case":
    {
        "prefix": "case",
        "body":
        [
            "case (${1:value}):",
            "{",
            "\t${0://code here}",
            "}"
        ]
    },
    "if":
    {
        "prefix": "if",
        "body": 
        [
            "if(${1:expression})",
            "{",
            "\t${0://code}",
            "}"
        ]
    },
    "else":
    {
        "prefix": "else",
        "body": 
        [
            "else",
            "{",
            "\t${0://code}",
            "}"
        ]
    },
    "while":
    {
        "prefix": "while",
        "body": 
        [
            "while(${1:expression})",
            "{",
            "\t${0://code}",
            "}"
        ]
    },
    "dountil":
    {
        "prefix": "dountil",
        "body": 
        [
            "do",
            "{",
            "\t${0://code}",
            "}",
            "until(${1:expression});"
        ]
    },
    "function":
    {
        "prefix": "function",
        "body": 
        [
            "function ${1:name}(${2:args})",
            "{",
            "\t${0://code}",
            "}"
        ]
    },
    "string_function":
    {
        "prefix": "string_function",
        "body": 
        [
            "string_function ${1:name}(${2:args})",
            "{",
            "\tstring ${3:returnValue}[255];",
            "\t${0://code}",
            "\t",
            "\treturn ($3);",
            "}"
        ]
    },
    "integer_function":
    {
        "prefix": "integer_function",
        "body": 
        [
            "integer_function ${1:name}(${2:args})",
            "{",
            "\tinteger ${3:returnValue};",
            "\t${0://code}",
            "\t",
            "\treturn ($3);",
            "}"
        ]
    },
    "GetLastModifiedArrayIndex": {
        "prefix":"getlast",
        "body":
        [
            "GetLastModifiedArrayIndex();",
            ""
        ],
        "description": "Returns last modified array index"
    },
    "RegisterDelegate": {
        "prefix":"registerdelegate",
        "body":
        [
            "RegisterDelegate(${1:objectName}, ${2:delegateName}, ${3:callbackName});",
            "",
            "callback function ${3:callbackName}(${4:argsType} args)",
            "{",
            "\t${0://todo: code};",
            "}"
        ],
        "description": "Register Delegates and generate callback function."
    }
}